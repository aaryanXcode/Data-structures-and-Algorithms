#include<bits/stdc++.h>
using namespace std;

void printEdgesArray(int** edges,int n){
    cout<<"  ";
    for(int i =0;i<n;i++){
        cout<<i<<" ";
    }
    cout<<endl;
    for(int i =0;i<n;i++){
        cout<<i<<":";
        for(int j = 0;j<n;j++){
            cout<<edges[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
}

void dfs(int** edges, int n, int sv,bool* visited){
    visited[sv] = true;
    cout<<"sv:"<<sv<<endl;
    for(int i =0;i<n;i++){
        if(i==sv) continue;
        if(edges[sv][i]==1 && !visited[i])
            dfs(edges,n,i,visited);
    }
}

void bfs(int** edges,int n,int sv,bool* visited){
    queue<int> q;
    q.push(sv);
    visited[sv] = true;

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << "Visited: " << current << endl;

        for (int i = 0; i < n; i++) {
            if (i == current) continue;
            if (edges[current][i] == 1 && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }

}
void dfsDisconnect(int** edges,int n){
    bool* visited = new bool[];
    for(int i =0;i<n;i++){
        visited[i] = false;
    }

    for(int i =0;i<n;i++){
        if(!visited[i]){
            dfs(edges,n,i,visited);
        }
    }
}

void bfsDisconnect(int** edges,int n){
    bool* visited = new bool[];
    for(int i =0;i<n;i++){
        visited[i] = false;
    }

    for(int i =0;i<n;i++){
        if(!visited[i]){
            bfs(edges,n,i,visited);
        }
    }
}

/*******************************has path******************************************************************************  */
bool hasPath(int** edges, int n, int sv, bool* visited,int ev){
    visited[sv] = true;
    if(sv==ev){
        return true;
    }
    for(int i = 0;i<n;i++){
        if(!visisted && edges[sv][i]==1){
            return hasPath(edges,n,i,visited);
        }
    }
}
/********************************************************************************************************************* */
int main(){
    int n,e;
    cout<<"enter no of vertices and edges:";
    cin>>n>>e;
    int** edges = new int*[n];
    for(int i =0; i<n; i++){
        edges[i] = new int[n];
        for(int j = 0;j<n;j++){
            edges[i][j] = 0;
        }
    }
    printEdgesArray(edges,n);

    for(int i =0;i<e;i++){
        
        int f,s;
        cout<<"enter edge between vertices"<<endl;
        cin>>f>>s;
        edges[f][s] =1;
        edges[s][f] =1;
        
    }
    bool* visited = new bool[n];
    for(int i =0;i<n;i++){
        visited[i] = false;
    }
    printEdgesArray(edges,n);

    //traverse edges
    cout<<"dfs traversal"<<endl;
    dfs(edges, n, 0,visited);

    cout<<"bfs traversal"<<endl;
    bfs(edges,n,0,visited);

    //to print all disconnected graph dfs
    dfsDisconnect(edges,n);

    //to print all disconnected graph bfs
    bfsDisconnect(edges,n);
}